// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: odpf/optimus/core/v1beta1/job_run.proto

package optimus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobRunServiceClient is the client API for JobRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobRunServiceClient interface {
	// GetJobTask provides task details specific to plugin used in a job
	GetJobTask(ctx context.Context, in *GetJobTaskRequest, opts ...grpc.CallOption) (*GetJobTaskResponse, error)
	// RegisterInstance is an internal admin command used during task/hook execution
	// to pull task/hook compiled configuration and assets.
	RegisterInstance(ctx context.Context, in *RegisterInstanceRequest, opts ...grpc.CallOption) (*RegisterInstanceResponse, error)
	// JobStatus returns the current and past run status of jobs
	JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	// JobRun returns the current and past run status of jobs on a given range
	JobRun(ctx context.Context, in *JobRunRequest, opts ...grpc.CallOption) (*JobRunResponse, error)
	// GetWindow provides the start and end dates provided a scheduled date
	// of the execution window
	GetWindow(ctx context.Context, in *GetWindowRequest, opts ...grpc.CallOption) (*GetWindowResponse, error)
	// RunJob creates a job run and executes all included tasks/hooks instantly
	// this doesn't necessarily deploy the job in db first
	RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (*RunJobResponse, error)
}

type jobRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobRunServiceClient(cc grpc.ClientConnInterface) JobRunServiceClient {
	return &jobRunServiceClient{cc}
}

func (c *jobRunServiceClient) GetJobTask(ctx context.Context, in *GetJobTaskRequest, opts ...grpc.CallOption) (*GetJobTaskResponse, error) {
	out := new(GetJobTaskResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.JobRunService/GetJobTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRunServiceClient) RegisterInstance(ctx context.Context, in *RegisterInstanceRequest, opts ...grpc.CallOption) (*RegisterInstanceResponse, error) {
	out := new(RegisterInstanceResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.JobRunService/RegisterInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRunServiceClient) JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.JobRunService/JobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRunServiceClient) JobRun(ctx context.Context, in *JobRunRequest, opts ...grpc.CallOption) (*JobRunResponse, error) {
	out := new(JobRunResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.JobRunService/JobRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRunServiceClient) GetWindow(ctx context.Context, in *GetWindowRequest, opts ...grpc.CallOption) (*GetWindowResponse, error) {
	out := new(GetWindowResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.JobRunService/GetWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRunServiceClient) RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (*RunJobResponse, error) {
	out := new(RunJobResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.JobRunService/RunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobRunServiceServer is the server API for JobRunService service.
// All implementations must embed UnimplementedJobRunServiceServer
// for forward compatibility
type JobRunServiceServer interface {
	// GetJobTask provides task details specific to plugin used in a job
	GetJobTask(context.Context, *GetJobTaskRequest) (*GetJobTaskResponse, error)
	// RegisterInstance is an internal admin command used during task/hook execution
	// to pull task/hook compiled configuration and assets.
	RegisterInstance(context.Context, *RegisterInstanceRequest) (*RegisterInstanceResponse, error)
	// JobStatus returns the current and past run status of jobs
	JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	// JobRun returns the current and past run status of jobs on a given range
	JobRun(context.Context, *JobRunRequest) (*JobRunResponse, error)
	// GetWindow provides the start and end dates provided a scheduled date
	// of the execution window
	GetWindow(context.Context, *GetWindowRequest) (*GetWindowResponse, error)
	// RunJob creates a job run and executes all included tasks/hooks instantly
	// this doesn't necessarily deploy the job in db first
	RunJob(context.Context, *RunJobRequest) (*RunJobResponse, error)
	mustEmbedUnimplementedJobRunServiceServer()
}

// UnimplementedJobRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobRunServiceServer struct {
}

func (UnimplementedJobRunServiceServer) GetJobTask(context.Context, *GetJobTaskRequest) (*GetJobTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobTask not implemented")
}
func (UnimplementedJobRunServiceServer) RegisterInstance(context.Context, *RegisterInstanceRequest) (*RegisterInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInstance not implemented")
}
func (UnimplementedJobRunServiceServer) JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (UnimplementedJobRunServiceServer) JobRun(context.Context, *JobRunRequest) (*JobRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobRun not implemented")
}
func (UnimplementedJobRunServiceServer) GetWindow(context.Context, *GetWindowRequest) (*GetWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWindow not implemented")
}
func (UnimplementedJobRunServiceServer) RunJob(context.Context, *RunJobRequest) (*RunJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedJobRunServiceServer) mustEmbedUnimplementedJobRunServiceServer() {}

// UnsafeJobRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobRunServiceServer will
// result in compilation errors.
type UnsafeJobRunServiceServer interface {
	mustEmbedUnimplementedJobRunServiceServer()
}

func RegisterJobRunServiceServer(s grpc.ServiceRegistrar, srv JobRunServiceServer) {
	s.RegisterService(&JobRunService_ServiceDesc, srv)
}

func _JobRunService_GetJobTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRunServiceServer).GetJobTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.JobRunService/GetJobTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRunServiceServer).GetJobTask(ctx, req.(*GetJobTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRunService_RegisterInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRunServiceServer).RegisterInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.JobRunService/RegisterInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRunServiceServer).RegisterInstance(ctx, req.(*RegisterInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRunService_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRunServiceServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.JobRunService/JobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRunServiceServer).JobStatus(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRunService_JobRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRunServiceServer).JobRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.JobRunService/JobRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRunServiceServer).JobRun(ctx, req.(*JobRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRunService_GetWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRunServiceServer).GetWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.JobRunService/GetWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRunServiceServer).GetWindow(ctx, req.(*GetWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRunService_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRunServiceServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.JobRunService/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRunServiceServer).RunJob(ctx, req.(*RunJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobRunService_ServiceDesc is the grpc.ServiceDesc for JobRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.optimus.core.v1beta1.JobRunService",
	HandlerType: (*JobRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobTask",
			Handler:    _JobRunService_GetJobTask_Handler,
		},
		{
			MethodName: "RegisterInstance",
			Handler:    _JobRunService_RegisterInstance_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _JobRunService_JobStatus_Handler,
		},
		{
			MethodName: "JobRun",
			Handler:    _JobRunService_JobRun_Handler,
		},
		{
			MethodName: "GetWindow",
			Handler:    _JobRunService_GetWindow_Handler,
		},
		{
			MethodName: "RunJob",
			Handler:    _JobRunService_RunJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/optimus/core/v1beta1/job_run.proto",
}
