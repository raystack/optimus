// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: odpf/optimus/core/v1beta1/resource.proto

package optimus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	// DeployResourceSpecification migrate all resource specifications of a datastore in project
	// State of the world request
	DeployResourceSpecification(ctx context.Context, opts ...grpc.CallOption) (ResourceService_DeployResourceSpecificationClient, error)
	// ListResourceSpecification lists all resource specifications of a datastore in project
	ListResourceSpecification(ctx context.Context, in *ListResourceSpecificationRequest, opts ...grpc.CallOption) (*ListResourceSpecificationResponse, error)
	// Database CRUD
	// CreateResource registers a new resource of a namespace which belongs to a project
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	// ReadResource reads a provided resource spec of a namespace
	ReadResource(ctx context.Context, in *ReadResourceRequest, opts ...grpc.CallOption) (*ReadResourceResponse, error)
	// UpdateResource updates a resource specification of a datastore in project
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) DeployResourceSpecification(ctx context.Context, opts ...grpc.CallOption) (ResourceService_DeployResourceSpecificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[0], "/odpf.optimus.core.v1beta1.ResourceService/DeployResourceSpecification", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceServiceDeployResourceSpecificationClient{stream}
	return x, nil
}

type ResourceService_DeployResourceSpecificationClient interface {
	Send(*DeployResourceSpecificationRequest) error
	Recv() (*DeployResourceSpecificationResponse, error)
	grpc.ClientStream
}

type resourceServiceDeployResourceSpecificationClient struct {
	grpc.ClientStream
}

func (x *resourceServiceDeployResourceSpecificationClient) Send(m *DeployResourceSpecificationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceServiceDeployResourceSpecificationClient) Recv() (*DeployResourceSpecificationResponse, error) {
	m := new(DeployResourceSpecificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceServiceClient) ListResourceSpecification(ctx context.Context, in *ListResourceSpecificationRequest, opts ...grpc.CallOption) (*ListResourceSpecificationResponse, error) {
	out := new(ListResourceSpecificationResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.ResourceService/ListResourceSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.ResourceService/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ReadResource(ctx context.Context, in *ReadResourceRequest, opts ...grpc.CallOption) (*ReadResourceResponse, error) {
	out := new(ReadResourceResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.ResourceService/ReadResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.core.v1beta1.ResourceService/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility
type ResourceServiceServer interface {
	// DeployResourceSpecification migrate all resource specifications of a datastore in project
	// State of the world request
	DeployResourceSpecification(ResourceService_DeployResourceSpecificationServer) error
	// ListResourceSpecification lists all resource specifications of a datastore in project
	ListResourceSpecification(context.Context, *ListResourceSpecificationRequest) (*ListResourceSpecificationResponse, error)
	// Database CRUD
	// CreateResource registers a new resource of a namespace which belongs to a project
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	// ReadResource reads a provided resource spec of a namespace
	ReadResource(context.Context, *ReadResourceRequest) (*ReadResourceResponse, error)
	// UpdateResource updates a resource specification of a datastore in project
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (UnimplementedResourceServiceServer) DeployResourceSpecification(ResourceService_DeployResourceSpecificationServer) error {
	return status.Errorf(codes.Unimplemented, "method DeployResourceSpecification not implemented")
}
func (UnimplementedResourceServiceServer) ListResourceSpecification(context.Context, *ListResourceSpecificationRequest) (*ListResourceSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceSpecification not implemented")
}
func (UnimplementedResourceServiceServer) CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedResourceServiceServer) ReadResource(context.Context, *ReadResourceRequest) (*ReadResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadResource not implemented")
}
func (UnimplementedResourceServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_DeployResourceSpecification_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceServiceServer).DeployResourceSpecification(&resourceServiceDeployResourceSpecificationServer{stream})
}

type ResourceService_DeployResourceSpecificationServer interface {
	Send(*DeployResourceSpecificationResponse) error
	Recv() (*DeployResourceSpecificationRequest, error)
	grpc.ServerStream
}

type resourceServiceDeployResourceSpecificationServer struct {
	grpc.ServerStream
}

func (x *resourceServiceDeployResourceSpecificationServer) Send(m *DeployResourceSpecificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceServiceDeployResourceSpecificationServer) Recv() (*DeployResourceSpecificationRequest, error) {
	m := new(DeployResourceSpecificationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResourceService_ListResourceSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ListResourceSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.ResourceService/ListResourceSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ListResourceSpecification(ctx, req.(*ListResourceSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.ResourceService/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ReadResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ReadResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.ResourceService/ReadResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ReadResource(ctx, req.(*ReadResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.core.v1beta1.ResourceService/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.optimus.core.v1beta1.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResourceSpecification",
			Handler:    _ResourceService_ListResourceSpecification_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _ResourceService_CreateResource_Handler,
		},
		{
			MethodName: "ReadResource",
			Handler:    _ResourceService_ReadResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ResourceService_UpdateResource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeployResourceSpecification",
			Handler:       _ResourceService_DeployResourceSpecification_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "odpf/optimus/core/v1beta1/resource.proto",
}
