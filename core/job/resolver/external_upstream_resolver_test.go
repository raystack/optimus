package resolver_test

import (
	"context"
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"

	"github.com/odpf/optimus/core/job"
	"github.com/odpf/optimus/core/job/dto"
	"github.com/odpf/optimus/core/job/resolver"
	"github.com/odpf/optimus/core/tenant"
	"github.com/odpf/optimus/ext/resourcemanager"
)

func TestExternalUpstreamResolver(t *testing.T) {
	ctx := context.Background()
	externalTenant, _ := tenant.NewTenant("external-project", "external-namespace")
	resourceManager := new(ResourceManager)
	optimusResourceManagers := []resourcemanager.ResourceManager{resourceManager}
	taskName, _ := job.TaskNameFrom("sample-task")

	t.Run("fetchExternalUpstreams", func(t *testing.T) {
		t.Run("resolves upstream externally", func(t *testing.T) {
			rawUpstreams := []*dto.RawUpstream{
				{JobName: "job-B", ProjectName: externalTenant.ProjectName().String()},
				{ResourceURN: "resource-C"},
			}
			upstreamB := job.NewUpstreamResolved("job-B", "external-host", "resource-B", externalTenant, "static", taskName, true)
			upstreamC := job.NewUpstreamResolved("job-C", "external-host", "resource-C", externalTenant, "inferred", taskName, true)
			resourceManager.On("GetOptimusUpstreams", ctx, rawUpstreams[0]).Return([]*job.Upstream{upstreamB}, nil).Once()
			resourceManager.On("GetOptimusUpstreams", ctx, rawUpstreams[1]).Return([]*job.Upstream{upstreamC}, nil).Once()

			extUpstreamResolver := resolver.NewTestExternalUpstreamResolver(optimusResourceManagers)
			result, unresolvedDep, err := extUpstreamResolver.Resolve(ctx, rawUpstreams)
			assert.Nil(t, unresolvedDep)
			assert.Nil(t, err)
			assert.EqualValues(t, []*job.Upstream{upstreamB, upstreamC}, result)
		})
		t.Run("returns unresolved upstream and upstream error if unable to fetch upstreams from external", func(t *testing.T) {
			rawUpstreams := []*dto.RawUpstream{
				{JobName: "job-B", ProjectName: externalTenant.ProjectName().String()},
				{ResourceURN: "resource-C"},
			}
			unresolvedUpstream := job.NewUpstreamUnresolved("", "resource-C", "")
			upstreamB := job.NewUpstreamResolved("job-B", "external-host", "resource-B", externalTenant, "static", taskName, true)
			resourceManager.On("GetOptimusUpstreams", ctx, rawUpstreams[0]).Return([]*job.Upstream{upstreamB}, nil).Once()
			resourceManager.On("GetOptimusUpstreams", ctx, rawUpstreams[1]).Return([]*job.Upstream{}, errors.New("connection error")).Once()

			extUpstreamResolver := resolver.NewTestExternalUpstreamResolver(optimusResourceManagers)
			result, unresolvedDep, err := extUpstreamResolver.Resolve(ctx, rawUpstreams)
			assert.Equal(t, []*job.Upstream{unresolvedUpstream}, unresolvedDep)
			assert.NotNil(t, err)
			assert.Equal(t, []*job.Upstream{upstreamB}, result)
		})
	})
}

// ResourceManager is an autogenerated mock type for the ResourceManager type
type ResourceManager struct {
	mock.Mock
}

// GetOptimusUpstreams provides a mock function with given fields: ctx, unresolvedDependency
func (_m *ResourceManager) GetOptimusUpstreams(ctx context.Context, unresolvedDependency *dto.RawUpstream) ([]*job.Upstream, error) {
	ret := _m.Called(ctx, unresolvedDependency)

	var r0 []*job.Upstream
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RawUpstream) []*job.Upstream); ok {
		r0 = rf(ctx, unresolvedDependency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*job.Upstream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.RawUpstream) error); ok {
		r1 = rf(ctx, unresolvedDependency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
