package scheduler

import (
	"context"
	"encoding/json"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"gorm.io/gorm"

	serviceScheduler "github.com/odpf/optimus/core/scheduler"
	serviceTenant "github.com/odpf/optimus/core/tenant"
	repoScheduler "github.com/odpf/optimus/internal/store/postgres/scheduler"
	repoTenant "github.com/odpf/optimus/internal/store/postgres/tenant"
	"github.com/odpf/optimus/models"
	"github.com/odpf/optimus/tests/setup"
)

func BenchmarkJobRepository(b *testing.B) {
	ctx := context.Background()

	proj, err := serviceTenant.NewProject("test-proj",
		map[string]string{
			"bucket":                            "gs://some_folder-2",
			serviceTenant.ProjectSchedulerHost:  "host",
			serviceTenant.ProjectStoragePathKey: "gs://location",
		})
	assert.NoError(b, err)
	namespace, err := serviceTenant.NewNamespace("test-ns", proj.Name(),
		map[string]string{
			"bucket": "gs://ns_bucket",
		})
	assert.NoError(b, err)
	tnnt, err := serviceTenant.NewTenant(proj.Name().String(), namespace.Name().String())
	assert.NoError(b, err)

	dbSetup := func() *gorm.DB {
		dbConn := setup.TestDB()
		setup.TruncateTables(dbConn)

		projRepo := repoTenant.NewProjectRepository(dbConn)
		if err := projRepo.Save(ctx, proj); err != nil {
			panic(err)
		}

		namespaceRepo := repoTenant.NewNamespaceRepository(dbConn)
		if err := namespaceRepo.Save(ctx, namespace); err != nil {
			panic(err)
		}
		return dbConn
	}

	b.Run("GetJob", func(b *testing.B) {
		db := dbSetup()
		repo := repoScheduler.NewJobProviderRepository(db)

		maxNumberOfJobs := 50
		for i := 0; i < maxNumberOfJobs; i++ {
			name := fmt.Sprintf("job_test_%d", i)
			jobName, err := serviceScheduler.JobNameFrom(name)
			assert.NoError(b, err)
			destination := "dev.resource.sample"
			job := buildRepoJob(tnnt, jobName, destination)
			err = db.WithContext(ctx).Create(job).Error
			assert.NoError(b, err)
		}

		b.ResetTimer()

		for i := 0; i < b.N; i++ {
			jobIdx := i % maxNumberOfJobs
			name := fmt.Sprintf("job_test_%d", jobIdx)
			jobName, err := serviceScheduler.JobNameFrom(name)
			assert.NoError(b, err)

			actualJob, actualError := repo.GetJob(ctx, proj.Name(), jobName)
			assert.NotNil(b, actualJob)
			assert.NoError(b, actualError)
		}
	})
}

func buildRepoJob(tnnt serviceTenant.Tenant, name serviceScheduler.JobName, destination string) *repoScheduler.Job {
	taskConfig, err := json.Marshal(map[string]string{
		"configName": "configVale",
	})
	if err != nil {
		panic(err)
	}
	hooks, err := json.Marshal([]*serviceScheduler.Hook{
		{
			Name: "dummy_hook", Config: map[string]string{
				"host": "http://github.com",
			},
		},
	})
	if err != nil {
		panic(err)
	}
	assets, err := json.Marshal(map[string]string{
		"query.sql": "select 1;",
	})
	if err != nil {
		panic(err)
	}
	return &repoScheduler.Job{
		Name:             name.String(),
		Destination:      destination,
		TaskName:         "task_name",
		TaskConfig:       taskConfig,
		WindowTruncateTo: "d",
		WindowOffset:     "1h",
		WindowSize:       "24h",
		Hooks:            hooks,
		Assets:           assets,
	}
}

func buildServiceJob(tnnt serviceTenant.Tenant, name serviceScheduler.JobName, destination string) *serviceScheduler.Job {
	window, err := models.NewWindow(2, "d", "1h", "24h")
	if err != nil {
		panic(err)
	}
	return &serviceScheduler.Job{
		Tenant:      tnnt,
		Name:        name,
		Destination: destination,
		Task: &serviceScheduler.Task{
			Name: "task_name",
			Config: map[string]string{
				"configName": "configVale",
			},
		},
		Window: window,
		Hooks: []*serviceScheduler.Hook{
			{
				Name: "dummy_hook", Config: map[string]string{
					"host": "http://github.com",
				},
			},
		},
		Assets: map[string]string{
			"query.sql": "select 1;",
		},
	}
}
